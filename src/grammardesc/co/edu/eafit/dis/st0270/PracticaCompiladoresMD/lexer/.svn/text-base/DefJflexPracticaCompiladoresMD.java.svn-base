/* The following code was generated by JFlex 1.4.3 on 4/06/12 11:46 PM */

package grammardesc.co.edu.eafit.dis.st0270.PracticaCompiladoresMD.lexer;


import java_cup.runtime.Symbol;
import java_cup.runtime.Scanner;
import grammardesc.co.edu.eafit.dis.st0270.PracticaCompiladoresMD.parser.CupSymbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/06/12 11:46 PM from the specification file
 * <tt>/home/jvidalva/Escritorio/practica_compiladoresmd/trunk/src/lexer/jflex/DefJflexPracticaCompiladoresMD.jflex</tt>
 */
public class DefJflexPracticaCompiladoresMD implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\26\1\30\2\0\1\27\16\15\4\0\1\26\1\44\1\0"+
    "\1\62\1\52\1\54\1\40\1\0\1\45\1\46\1\50\1\47\1\57"+
    "\1\14\1\21\1\2\12\1\1\3\1\65\1\41\1\42\1\43\1\61"+
    "\1\67\1\22\7\16\1\24\2\16\1\23\6\16\1\25\7\16\3\0"+
    "\1\53\1\16\1\0\1\11\1\32\1\34\1\20\1\7\1\10\1\36"+
    "\1\35\1\17\2\16\1\12\1\51\1\31\1\33\2\16\1\5\1\13"+
    "\1\4\1\6\1\16\1\66\3\16\1\63\1\37\1\64\1\56\41\15"+
    "\2\0\4\16\4\0\1\16\2\0\1\15\2\0\1\55\4\0\1\16"+
    "\4\0\1\16\4\0\1\60\27\16\1\0\37\16\1\0\u01ca\16\4\0"+
    "\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0\160\15\5\16"+
    "\1\0\2\16\2\0\4\16\10\0\1\16\1\0\3\16\1\0\1\16"+
    "\1\0\24\16\1\0\123\16\1\0\213\16\1\0\5\15\2\0\236\16"+
    "\11\0\46\16\2\0\1\16\7\0\47\16\11\0\55\15\1\0\1\15"+
    "\1\0\2\15\1\0\2\15\1\0\1\15\10\0\33\16\5\0\3\16"+
    "\15\0\4\15\7\0\1\16\4\0\13\15\5\0\53\16\25\15\12\1"+
    "\4\0\2\16\1\15\143\16\1\0\1\16\10\15\1\0\6\15\2\16"+
    "\2\15\1\0\4\15\2\16\12\1\3\16\2\0\1\16\17\0\1\15"+
    "\1\16\1\15\36\16\33\15\2\0\131\16\13\15\1\16\16\0\12\1"+
    "\41\16\11\15\2\16\4\0\1\16\5\0\26\16\4\15\1\16\11\15"+
    "\1\16\3\15\1\16\5\15\22\0\31\16\3\15\244\0\4\15\66\16"+
    "\3\15\1\16\22\15\1\16\7\15\12\16\2\15\2\0\12\1\1\0"+
    "\7\16\1\0\7\16\1\0\3\15\1\0\10\16\2\0\2\16\2\0"+
    "\26\16\1\0\7\16\1\0\1\16\3\0\4\16\2\0\1\15\1\16"+
    "\7\15\2\0\2\15\2\0\3\15\1\16\10\0\1\15\4\0\2\16"+
    "\1\0\3\16\2\15\2\0\12\1\4\16\7\0\1\16\5\0\3\15"+
    "\1\0\6\16\4\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16"+
    "\1\0\2\16\1\0\2\16\2\0\1\15\1\0\5\15\4\0\2\15"+
    "\2\0\3\15\3\0\1\15\7\0\4\16\1\0\1\16\7\0\12\1"+
    "\2\15\3\16\1\15\13\0\3\15\1\0\11\16\1\0\3\16\1\0"+
    "\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0\1\15\1\16"+
    "\10\15\1\0\3\15\1\0\3\15\2\0\1\16\17\0\2\16\2\15"+
    "\2\0\12\1\1\0\1\16\17\0\3\15\1\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0\1\15"+
    "\1\16\7\15\2\0\2\15\2\0\3\15\10\0\2\15\4\0\2\16"+
    "\1\0\3\16\2\15\2\0\12\1\1\0\1\16\20\0\1\15\1\16"+
    "\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0\1\16"+
    "\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\4\0\5\15"+
    "\3\0\3\15\1\0\4\15\2\0\1\16\6\0\1\15\16\0\12\1"+
    "\11\0\1\16\7\0\3\15\1\0\10\16\1\0\3\16\1\0\27\16"+
    "\1\0\12\16\1\0\5\16\3\0\1\16\7\15\1\0\3\15\1\0"+
    "\4\15\7\0\2\15\1\0\2\16\6\0\2\16\2\15\2\0\12\1"+
    "\22\0\2\15\1\0\10\16\1\0\3\16\1\0\27\16\1\0\12\16"+
    "\1\0\5\16\2\0\1\15\1\16\7\15\1\0\3\15\1\0\4\15"+
    "\7\0\2\15\7\0\1\16\1\0\2\16\2\15\2\0\12\1\1\0"+
    "\2\16\17\0\2\15\1\0\10\16\1\0\3\16\1\0\51\16\2\0"+
    "\1\16\7\15\1\0\3\15\1\0\4\15\1\16\10\0\1\15\10\0"+
    "\2\16\2\15\2\0\12\1\12\0\6\16\2\0\2\15\1\0\22\16"+
    "\3\0\30\16\1\0\11\16\1\0\1\16\2\0\7\16\3\0\1\15"+
    "\4\0\6\15\1\0\1\15\1\0\10\15\22\0\2\15\15\0\60\16"+
    "\1\15\2\16\7\15\4\0\10\16\10\15\1\0\12\1\47\0\2\16"+
    "\1\0\1\16\2\0\2\16\1\0\1\16\2\0\1\16\6\0\4\16"+
    "\1\0\7\16\1\0\3\16\1\0\1\16\1\0\1\16\2\0\2\16"+
    "\1\0\4\16\1\15\2\16\6\15\1\0\2\15\1\16\2\0\5\16"+
    "\1\0\1\16\1\0\6\15\2\0\12\1\2\0\2\16\42\0\1\16"+
    "\27\0\2\15\6\0\12\1\13\0\1\15\1\0\1\15\1\0\1\15"+
    "\4\0\2\15\10\16\1\0\44\16\4\0\24\15\1\0\2\15\5\16"+
    "\13\15\1\0\44\15\11\0\1\15\71\0\53\16\24\15\1\16\12\1"+
    "\6\0\6\16\4\15\4\16\3\15\1\16\3\15\2\16\7\15\3\16"+
    "\4\15\15\16\14\15\1\16\1\15\12\1\4\15\2\0\46\16\12\0"+
    "\53\16\1\0\1\16\3\0\u0149\16\1\0\4\16\2\0\7\16\1\0"+
    "\1\16\1\0\4\16\2\0\51\16\1\0\4\16\2\0\41\16\1\0"+
    "\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\17\16\1\0"+
    "\71\16\1\0\4\16\2\0\103\16\2\0\3\15\40\0\20\16\20\0"+
    "\125\16\14\0\u026c\16\2\0\21\16\1\0\32\16\5\0\113\16\3\0"+
    "\3\16\17\0\15\16\1\0\4\16\3\15\13\0\22\16\3\15\13\0"+
    "\22\16\2\15\14\0\15\16\1\0\3\16\1\0\2\15\14\0\64\16"+
    "\40\15\3\0\1\16\3\0\2\16\1\15\2\0\12\1\41\0\3\15"+
    "\2\0\12\1\6\0\130\16\10\0\51\16\1\15\1\16\5\0\106\16"+
    "\12\0\35\16\3\0\14\15\4\0\14\15\12\0\12\1\36\16\2\0"+
    "\5\16\13\0\54\16\4\0\21\15\7\16\2\15\6\0\12\1\46\0"+
    "\27\16\5\15\4\0\65\16\12\15\1\0\35\15\2\0\1\15\12\1"+
    "\6\0\12\1\15\0\1\16\130\0\5\15\57\16\21\15\7\16\4\0"+
    "\12\1\21\0\11\15\14\0\3\15\36\16\12\15\3\0\2\16\12\1"+
    "\6\0\46\16\16\15\14\0\44\16\24\15\10\0\12\1\3\0\3\16"+
    "\12\1\44\16\122\0\3\15\1\0\25\15\4\16\1\15\4\16\1\15"+
    "\15\0\300\16\47\15\25\0\4\15\u0116\16\2\0\6\16\2\0\46\16"+
    "\2\0\6\16\2\0\10\16\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\37\16\2\0\65\16\1\0\7\16\1\0\1\16\3\0\3\16"+
    "\1\0\7\16\3\0\4\16\2\0\6\16\4\0\15\16\5\0\3\16"+
    "\1\0\7\16\16\0\5\15\32\0\5\15\20\0\2\16\23\0\1\16"+
    "\13\0\5\15\5\0\6\15\1\0\1\16\15\0\1\16\20\0\15\16"+
    "\3\0\32\16\26\0\15\15\4\0\1\15\3\0\14\15\21\0\1\16"+
    "\4\0\1\16\2\0\12\16\1\0\1\16\3\0\5\16\6\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\4\16\1\0\13\16\2\0\4\16"+
    "\5\0\5\16\4\0\1\16\21\0\51\16\u0a77\0\57\16\1\0\57\16"+
    "\1\0\205\16\6\0\4\16\3\15\16\0\46\16\12\0\66\16\11\0"+
    "\1\16\17\0\1\15\27\16\11\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\40\15\57\0\1\16\u01d5\0\3\16\31\0\11\16\6\15\1\0"+
    "\5\16\2\0\5\16\4\0\126\16\2\0\2\15\2\0\3\16\1\0"+
    "\132\16\1\0\4\16\5\0\51\16\3\0\136\16\21\0\33\16\65\0"+
    "\20\16\u0200\0\u19b6\16\112\0\u51cc\16\64\0\u048d\16\103\0\56\16\2\0"+
    "\u010d\16\3\0\20\16\12\1\2\16\24\0\57\16\1\15\14\0\2\15"+
    "\1\0\31\16\10\0\120\16\2\15\45\0\11\16\2\0\147\16\2\0"+
    "\4\16\1\0\2\16\16\0\12\16\120\0\10\16\1\15\3\16\1\15"+
    "\4\16\1\15\27\16\5\15\20\0\1\16\7\0\64\16\14\0\2\15"+
    "\62\16\21\15\13\0\12\1\6\0\22\15\6\16\3\0\1\16\4\0"+
    "\12\1\34\16\10\15\2\0\27\16\15\15\14\0\35\16\3\0\4\15"+
    "\57\16\16\15\16\0\1\16\12\1\46\0\51\16\16\15\11\0\3\16"+
    "\1\15\10\16\2\15\2\0\12\1\6\0\27\16\3\0\1\16\1\15"+
    "\4\0\60\16\1\15\1\16\3\15\2\16\2\15\5\16\2\15\1\16"+
    "\1\15\1\16\30\0\3\16\43\0\6\16\2\0\6\16\2\0\6\16"+
    "\11\0\7\16\1\0\7\16\221\0\43\16\10\15\1\0\2\15\2\0"+
    "\12\1\6\0\u2ba4\16\14\0\27\16\4\0\61\16\u2104\0\u012e\16\2\0"+
    "\76\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0\1\16\1\15"+
    "\12\16\1\0\15\16\1\0\5\16\1\0\1\16\1\0\2\16\1\0"+
    "\2\16\1\0\154\16\41\0\u016b\16\22\0\100\16\2\0\66\16\50\0"+
    "\15\16\3\0\20\15\20\0\7\15\14\0\2\16\30\0\3\16\31\0"+
    "\1\16\6\0\5\16\1\0\207\16\2\0\1\15\4\0\1\16\13\0"+
    "\12\1\7\0\32\16\4\0\1\16\1\0\32\16\13\0\131\16\3\0"+
    "\6\16\2\0\6\16\2\0\6\16\2\0\3\16\3\0\2\16\3\0"+
    "\2\16\22\0\3\15\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\5\4\1\5\2\4"+
    "\1\6\1\4\2\7\4\4\2\1\1\10\1\1\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\1\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\4\1\32\1\2\1\33\1\34\5\4\1\35"+
    "\1\36\1\37\1\40\2\4\2\0\5\4\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\4\1\2\2\0\1\57"+
    "\5\4\1\60\1\61\6\4\2\0\1\62\1\63\5\4"+
    "\2\0\3\4\1\64\2\0\1\4\1\65\4\0\1\66"+
    "\3\0\1\67\3\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\70"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\70\0\70\0\70\0\70\0\u0578"+
    "\0\u05b0\0\u05e8\0\70\0\70\0\70\0\70\0\70\0\u0620"+
    "\0\70\0\70\0\70\0\u0658\0\70\0\u0690\0\70\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\70\0\u0118"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0118\0\70\0\70\0\70\0\70"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0118\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0118\0\u0118\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u0118\0\u10d8\0\u1110\0\u1148\0\u0118\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\70\0\u1260\0\u1298\0\u12d0\0\70\0\u1308\0\u1340"+
    "\0\u1378\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\2\7\1\12\1\13\1\2\1\7\1\14\1\15\1\16"+
    "\1\17\3\7\1\20\1\21\1\20\1\22\1\23\1\7"+
    "\1\24\1\25\1\7\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\7\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\71\0\1\56\70\0\1\57"+
    "\1\0\10\60\2\0\3\60\1\0\4\60\3\0\6\60"+
    "\12\0\2\60\13\0\1\60\2\0\1\7\2\0\1\7"+
    "\1\61\6\7\1\0\4\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\10\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\6\7\1\62\1\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\5\7\1\63\2\7"+
    "\1\0\2\7\1\64\1\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\1\65"+
    "\7\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\66\2\0\10\66\1\0"+
    "\4\66\1\0\4\66\3\0\6\66\12\0\2\66\1\67"+
    "\12\0\1\66\2\0\1\7\2\0\4\7\1\70\3\7"+
    "\1\0\3\7\1\71\1\0\4\7\3\0\1\72\5\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\5\7"+
    "\1\73\2\7\1\0\4\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\3\0\1\74\16\0\1\75"+
    "\47\0\1\7\2\0\10\7\1\0\4\7\1\0\1\7"+
    "\1\76\2\7\3\0\6\7\12\0\2\7\13\0\1\7"+
    "\31\0\1\20\40\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\4\7\3\0\2\7\1\77\3\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\4\7\3\0\2\7\1\100\3\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\6\7\1\101\1\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\4\7\3\0\2\7\1\102\3\7\12\0\2\7"+
    "\13\0\1\7\40\0\1\103\70\0\1\104\70\0\1\105"+
    "\1\106\67\0\1\107\11\0\1\110\55\0\1\111\1\112"+
    "\66\0\1\113\26\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\4\7\3\0\6\7\12\0\1\7\1\114\13\0"+
    "\1\7\15\0\1\115\115\0\1\116\11\0\1\117\75\0"+
    "\1\120\6\0\1\7\2\0\10\7\1\0\4\7\1\0"+
    "\4\7\3\0\4\7\1\121\1\7\12\0\2\7\13\0"+
    "\1\7\2\0\1\122\1\123\1\124\65\0\1\60\1\125"+
    "\1\0\10\60\1\0\4\60\1\0\4\60\3\0\6\60"+
    "\12\0\2\60\13\0\1\60\2\0\1\7\2\0\2\7"+
    "\1\126\5\7\1\0\4\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\7\7"+
    "\1\127\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\6\7\1\130"+
    "\1\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\6\7\1\131"+
    "\1\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\1\7\1\132"+
    "\6\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\66\2\0\10\66\1\0"+
    "\4\66\1\0\4\66\3\0\6\66\12\0\2\66\13\0"+
    "\1\66\2\0\1\71\2\0\10\71\1\0\4\71\1\0"+
    "\4\71\3\0\6\71\12\0\2\71\13\0\1\71\2\0"+
    "\1\7\2\0\1\133\7\7\1\0\4\7\1\0\4\7"+
    "\3\0\6\7\12\0\2\7\13\0\1\7\2\0\1\7"+
    "\2\0\1\131\7\7\1\0\4\7\1\0\4\7\3\0"+
    "\6\7\12\0\2\7\13\0\1\7\5\0\10\134\2\0"+
    "\3\134\1\0\4\134\3\0\6\134\12\0\2\134\13\0"+
    "\1\134\3\0\1\74\66\0\1\7\2\0\10\7\1\0"+
    "\4\7\1\0\2\7\1\135\1\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\10\7\1\0"+
    "\4\7\1\0\4\7\3\0\6\7\12\0\1\136\1\7"+
    "\13\0\1\7\2\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\4\7\3\0\2\7\1\137\3\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\5\7\1\140\2\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\2\7\1\141\5\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\10\7\1\0\2\7"+
    "\1\142\1\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\122\67\0\1\143\67\0\1\144"+
    "\72\0\10\60\2\0\3\60\1\0\4\60\3\0\6\60"+
    "\12\0\2\60\13\0\1\60\2\0\1\7\2\0\3\7"+
    "\1\145\4\7\1\0\4\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\3\7"+
    "\1\146\4\7\1\0\4\7\1\0\4\7\3\0\6\7"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\7\7"+
    "\1\126\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\3\7\1\133"+
    "\4\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\10\7\1\0"+
    "\2\7\1\147\1\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\134\1\74\1\0\10\134"+
    "\1\0\4\134\1\0\4\134\3\0\6\134\12\0\2\134"+
    "\13\0\1\134\2\0\1\7\2\0\10\7\1\0\4\7"+
    "\1\0\1\150\3\7\3\0\6\7\12\0\2\7\13\0"+
    "\1\7\2\0\1\7\2\0\10\7\1\0\4\7\1\0"+
    "\4\7\3\0\1\7\1\151\4\7\12\0\2\7\13\0"+
    "\1\7\2\0\1\7\2\0\6\7\1\133\1\7\1\0"+
    "\4\7\1\0\4\7\3\0\6\7\12\0\2\7\13\0"+
    "\1\7\2\0\1\7\2\0\7\7\1\152\1\0\4\7"+
    "\1\0\4\7\3\0\6\7\12\0\2\7\13\0\1\7"+
    "\2\0\1\7\2\0\1\7\1\133\6\7\1\0\4\7"+
    "\1\0\4\7\3\0\6\7\12\0\2\7\13\0\1\7"+
    "\2\0\1\7\2\0\6\7\1\153\1\7\1\0\4\7"+
    "\1\0\4\7\3\0\6\7\12\0\2\7\13\0\1\7"+
    "\2\0\1\154\67\0\1\155\67\0\1\7\2\0\10\7"+
    "\1\0\4\7\1\0\4\7\3\0\1\156\5\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\10\7\1\0"+
    "\4\7\1\0\3\7\1\157\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\1\7\1\160\6\7"+
    "\1\0\4\7\1\0\4\7\3\0\6\7\12\0\2\7"+
    "\13\0\1\7\2\0\1\7\2\0\7\7\1\133\1\0"+
    "\4\7\1\0\4\7\3\0\6\7\12\0\2\7\13\0"+
    "\1\7\2\0\1\7\2\0\3\7\1\161\4\7\1\0"+
    "\4\7\1\0\4\7\3\0\6\7\12\0\2\7\13\0"+
    "\1\7\3\0\1\162\70\0\1\163\65\0\1\7\2\0"+
    "\10\7\1\0\4\7\1\0\4\7\3\0\5\7\1\133"+
    "\12\0\2\7\13\0\1\7\2\0\1\7\2\0\10\7"+
    "\1\0\4\7\1\0\1\164\3\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\7\2\0\3\7\1\165"+
    "\4\7\1\0\4\7\1\0\4\7\3\0\6\7\12\0"+
    "\2\7\13\0\1\7\2\0\1\166\67\0\1\167\67\0"+
    "\1\7\2\0\10\7\1\0\4\7\1\170\4\7\3\0"+
    "\6\7\12\0\2\7\13\0\1\7\2\0\1\171\67\0"+
    "\1\172\110\0\1\173\46\0\1\174\111\0\1\175\45\0"+
    "\1\176\112\0\1\177\65\0\1\200\72\0\1\201\64\0"+
    "\1\202\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\12\1\1\11\13\1\4\11"+
    "\3\1\5\11\1\1\3\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\4\1\2\0\5\1\11\11\1\1\4\11"+
    "\2\1\2\0\16\1\2\0\7\1\2\0\4\1\2\0"+
    "\2\1\4\0\1\11\3\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DefJflexPracticaCompiladoresMD(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DefJflexPracticaCompiladoresMD(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { System.out.println("?");return new Symbol(CupSymbol.RCOMMAND);
          }
        case 57: break;
        case 10: 
          { System.out.println("!"); return new Symbol(CupSymbol.NEGACION);
          }
        case 58: break;
        case 40: 
          { System.out.println(">>");return new Symbol(CupSymbol.ARGOUT);
          }
        case 59: break;
        case 8: 
          { System.out.println("<"); return new Symbol(CupSymbol.MENOR);
          }
        case 60: break;
        case 20: 
          { System.out.println("¿");return new Symbol(CupSymbol.LCOMMAND);
          }
        case 61: break;
        case 27: 
          { System.out.println("//"); return new Symbol(CupSymbol.DIVIDE);
          }
        case 62: break;
        case 29: 
          { System.out.println("OPCION");return new Symbol(CupSymbol.OPCION);
          }
        case 63: break;
        case 23: 
          { System.out.println("{");return new Symbol(CupSymbol.LINSTRUCCIONES);
          }
        case 64: break;
        case 35: 
          { System.out.println("<<");return new Symbol(CupSymbol.ARGIN);
          }
        case 65: break;
        case 36: 
          { System.out.println("<="); return new Symbol(CupSymbol.MENORQUE);
          }
        case 66: break;
        case 26: 
          { System.out.println("@");return new Symbol(CupSymbol.ARROBA);
          }
        case 67: break;
        case 43: 
          { System.out.println("^-"); return new Symbol(CupSymbol.LOPCIONESFILE);
          }
        case 68: break;
        case 25: 
          { System.out.println(";");return new Symbol(CupSymbol.PUNTOYCOMA);
          }
        case 69: break;
        case 28: 
          { System.out.println("ABS");return new Symbol(CupSymbol.UBICACIONABS);
          }
        case 70: break;
        case 56: 
          { System.out.println("FILE");return new Symbol(CupSymbol.FILE);
          }
        case 71: break;
        case 19: 
          { System.out.println(",");return new Symbol(CupSymbol.SEPARADOR);
          }
        case 72: break;
        case 30: 
          { System.out.println("-^"); return new Symbol(CupSymbol.ROPCIONESFILE);
          }
        case 73: break;
        case 54: 
          { System.out.println("HORA");return new Symbol(CupSymbol.HORA);
          }
        case 74: break;
        case 17: 
          { System.out.println("°");return new Symbol(CupSymbol.DESCRIPCION);
          }
        case 75: break;
        case 51: 
          { System.out.println("else");return new Symbol(CupSymbol.ELSE);
          }
        case 76: break;
        case 41: 
          { System.out.println("!="); return new Symbol(CupSymbol.DIFERENTE);
          }
        case 77: break;
        case 18: 
          { System.out.println("~");return new Symbol(CupSymbol.IGUAL);
          }
        case 78: break;
        case 6: 
          { System.out.println("."); return new Symbol(CupSymbol.POINT);
          }
        case 79: break;
        case 7: 
          { /* Ignore */
          }
        case 80: break;
        case 46: 
          { System.out.println("##");return new Symbol(CupSymbol.RAPP);
          }
        case 81: break;
        case 52: 
          { System.out.println("while");return new Symbol(CupSymbol.WHILE);
          }
        case 82: break;
        case 14: 
          { System.out.println("*"); return new Symbol(CupSymbol.MUL);
          }
        case 83: break;
        case 33: 
          { System.out.println("||"); return new Symbol(CupSymbol.OR);
          }
        case 84: break;
        case 5: 
          { System.out.println("-"); return new Symbol(CupSymbol.MINUS);
          }
        case 85: break;
        case 44: 
          { System.out.println("%=");return new Symbol(CupSymbol.LFNS);
          }
        case 86: break;
        case 38: 
          { System.out.println("=%");return new Symbol(CupSymbol.RFNS);
          }
        case 87: break;
        case 12: 
          { System.out.println(")"); return new Symbol(CupSymbol.RPAREN);
          }
        case 88: break;
        case 50: 
          { System.out.println("BOOL");return new Symbol(CupSymbol.BOOL);
          }
        case 89: break;
        case 32: 
          { System.out.println("ID");return new Symbol(CupSymbol.ID);
          }
        case 90: break;
        case 53: 
          { System.out.println("N"); return new Symbol(CupSymbol.NOMBREC);
          }
        case 91: break;
        case 3: 
          { System.out.println(":");return new Symbol(CupSymbol.DOSPUNTOS);
          }
        case 92: break;
        case 11: 
          { System.out.println("("); return new Symbol(CupSymbol.LPAREN);
          }
        case 93: break;
        case 15: 
          { System.out.println("$"); return new Symbol(CupSymbol.LFILE);
          }
        case 94: break;
        case 1: 
          { throw new Error("Illegal character <" + 
                                       yytext() + "> at line: " + 
                                       (yyline + 1) + " column: " + 
                                       yycolumn);
          }
        case 95: break;
        case 55: 
          { System.out.println("DATE");return new Symbol(CupSymbol.FECHA);
          }
        case 96: break;
        case 34: 
          { System.out.println("&&"); return new Symbol(CupSymbol.AND);
          }
        case 97: break;
        case 22: 
          { System.out.println("#");return new Symbol(CupSymbol.LAPP);
          }
        case 98: break;
        case 37: 
          { System.out.println("=="); return new Symbol(CupSymbol.QUAL);
          }
        case 99: break;
        case 42: 
          { System.out.println("$$"); return new Symbol(CupSymbol.RFILE);
          }
        case 100: break;
        case 45: 
          { System.out.println("%%");return new Symbol(CupSymbol.RCLASS);
          }
        case 101: break;
        case 47: 
          { System.out.println("UBICACIONC");return new Symbol(CupSymbol.UBICACIONC);
          }
        case 102: break;
        case 31: 
          { System.out.println("if");return new Symbol(CupSymbol.IF);
          }
        case 103: break;
        case 16: 
          { System.out.println("%");return new Symbol(CupSymbol.LCLASS);
          }
        case 104: break;
        case 49: 
          { System.out.println("REL");return new Symbol(CupSymbol.UBICACIONREL);
          }
        case 105: break;
        case 9: 
          { System.out.println(">"); return new Symbol(CupSymbol.MAYOR);
          }
        case 106: break;
        case 4: 
          { System.out.println("ALIAS");return new Symbol(CupSymbol.ALIASA);
          }
        case 107: break;
        case 48: 
          { System.out.println("TIPO");return new Symbol(CupSymbol.TIPO);
          }
        case 108: break;
        case 24: 
          { System.out.println("}");return new Symbol(CupSymbol.RINSTRUCCIONES);
          }
        case 109: break;
        case 39: 
          { System.out.println(">="); return new Symbol(CupSymbol.MAYORQUE);
          }
        case 110: break;
        case 2: 
          { System.out.println("INT");return new Symbol(CupSymbol.INT);
          }
        case 111: break;
        case 13: 
          { System.out.println("+"); return new Symbol(CupSymbol.PLUS);
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
